alpha = colAlpha,
size = pointSize,
na.rm = TRUE) +
scale_colour_gradient(
low = colGradient[1],
high = colGradient[2],
limits = colGradientLimits,
breaks = colGradientBreaks,
labels = colGradientLabels)
# specify the shape with the supplied encoding
scale_shape_manual(values = shapeCustom)
}
# 5, both colCustom and shapeCustom are null;
# only a single shape value specified
} else if (is.null(colCustom) & is.null(shapeCustom) & length(shape) == 1) {
if (is.null(colGradient)) {
plot <- ggplot(toptable, aes(x = xvals, y = -log10(yvals))) + th +
# over-ride legend icon sizes for colour and shape.
# including 'shape' in the colour guide_legend here
# results in the legends merging
guides(colour = guide_legend(
order = 1,
override.aes = list(
shape = shape,
size = legendIconSize))) +
geom_point(
aes(color = Sig),
alpha = colAlpha,
shape = shape,
size = pointSize,
na.rm = TRUE) +
scale_color_manual(
values = c(
NS = col[1],
FC = col[2],
P = col[3],
FC_P = col[4]),
labels = c(
NS = legendLabels[1],
FC = legendLabels[2],
P = legendLabels[3],
FC_P = legendLabels[4]),
drop = legendDropLevels)
} else {
plot <- ggplot(toptable, aes(x = xvals, y = -log10(yvals))) + th +
geom_point(
aes(color = yvals),
alpha = colAlpha,
shape = shape,
size = pointSize,
na.rm = TRUE) +
scale_colour_gradient(
low = colGradient[1],
high = colGradient[2],
limits = colGradientLimits,
breaks = colGradientBreaks,
labels = colGradientLabels)
}
# 6, both colCustom and shapeCustom are null;
# four shape values are specified
} else if (is.null(colCustom) & is.null(shapeCustom) & length(shape) == 4) {
if (is.null(colGradient)) {
plot <- ggplot(toptable, aes(x = xvals, y = -log10(yvals))) + th +
# over-ride legend icon sizes for colour and shape.
# including 'shape' in the colour guide_legend here
# results in the legends merging
guides(colour = guide_legend(
order = 1,
override.aes = list(
shape = c(
NS = shape[1],
FC = shape[2],
P = shape[3],
FC_P = shape[4]),
size = legendIconSize))) +
geom_point(
aes(
color = Sig,
shape = Sig),
alpha = colAlpha,
size = pointSize,
na.rm = TRUE) +
scale_color_manual(
values = c(
NS = col[1],
FC = col[2],
P = col[3],
FC_P = col[4]),
labels = c(
NS = legendLabels[1],
FC = legendLabels[2],
P = legendLabels[3],
FC_P = legendLabels[4]),
drop = legendDropLevels) +
scale_shape_manual(
values = c(
NS = shape[1],
FC = shape[2],
P = shape[3],
FC_P = shape[4]),
guide = FALSE,
drop = legendDropLevels)
} else {
plot <- ggplot(toptable, aes(x = xvals, y = -log10(yvals))) + th +
geom_point(
aes(
color = yvals,
shape = Sig),
alpha = colAlpha,
size = pointSize,
na.rm = TRUE) +
scale_colour_gradient(
low = colGradient[1],
high = colGradient[2],
limits = colGradientLimits,
breaks = colGradientBreaks,
labels = colGradientLabels) +
scale_shape_manual(
values = c(
NS = shape[1],
FC = shape[2],
P = shape[3],
FC_P = shape[4]),
guide = FALSE,
drop = legendDropLevels)
}
}
# add more elements to the plot
plot <- plot +
xlab(xlab) +
ylab(ylab) +
xlim(xlim[1], xlim[2]) +
ylim(ylim[1], ylim[2]) +
geom_vline(xintercept = c(-FCcutoff, FCcutoff),
linetype = cutoffLineType,
colour = cutoffLineCol,
size = cutoffLineWidth) +
geom_hline(yintercept = -log10(pCutoff),
linetype = cutoffLineType,
colour = cutoffLineCol,
size = cutoffLineWidth)
# add elements to the plot for title, subtitle, caption
plot <- plot + labs(title = title,
subtitle = subtitle, caption = caption)
# add elements to the plot for vlines and hlines
if (!is.null(vline)) {
plot <- plot + geom_vline(xintercept = vline,
linetype = vlineType,
colour = vlineCol,
size = vlineWidth)
}
if (!is.null(hline)) {
plot <- plot + geom_hline(yintercept = -log10(hline),
linetype = hlineType,
colour = hlineCol,
size = hlineWidth)
}
# Border around plot
if (border == 'full') {
plot <- plot + theme(panel.border = element_rect(
colour = borderColour, fill = NA, size = borderWidth))
} else if (border == 'partial') {
plot <- plot + theme(axis.line = element_line(
size = borderWidth, colour = borderColour),
panel.border = element_blank(),
panel.background = element_blank())
} else {
stop('Unrecognised value passed to \'border\'. Must be \'full\' or \'partial\'')
}
# Gridlines
if (gridlines.major) {
plot <- plot + theme(panel.grid.major = element_line())
} else {
plot <- plot + theme(panel.grid.major = element_blank())
}
if (gridlines.minor) {
plot <- plot + theme(panel.grid.minor = element_line())
} else {
plot <- plot + theme(panel.grid.minor = element_blank())
}
# user has specified to draw with geom_text or geom_label?
if (!boxedLabels) {
# For labeling with geom_[text|label]_repel and
# geom_[text|label] with check_overlap = TRUE, 4 possible
# scenarios can arise
if (drawConnectors && is.null(selectLab)) {
if (arrowheads) {
arr <- arrow(length = lengthConnectors,
type = typeConnectors, ends = endsConnectors)
} else {
arr <- NULL
}
plot <- plot + geom_text_repel(
data = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff),
aes(label = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff)[["lab"]]),
xlim = c(NA, NA),
ylim = c(NA, NA),
size = labSize,
segment.color = colConnectors,
segment.size = widthConnectors,
arrow = arr,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE,
direction = directionConnectors,
max.overlaps = max.overlaps,
min.segment.length = min.segment.length)
} else if (drawConnectors && !is.null(selectLab)) {
if (arrowheads) {
arr <- arrow(length = lengthConnectors,
type = typeConnectors, ends = endsConnectors)
} else {
arr <- NULL
}
plot <- plot + geom_text_repel(
data = subset(toptable,
!is.na(toptable[['lab']])),
aes(label = subset(toptable,
!is.na(toptable[['lab']]))[['lab']]),
xlim = c(NA, NA),
ylim = c(NA, NA),
size = labSize,
segment.color = colConnectors,
segment.size = widthConnectors,
arrow = arr,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE,
direction = directionConnectors,
max.overlaps = max.overlaps,
min.segment.length = min.segment.length)
} else if (!drawConnectors && !is.null(selectLab)) {
plot <- plot + geom_text(
data = subset(toptable,
!is.na(toptable[['lab']])),
aes(
label = subset(toptable,
!is.na(toptable[['lab']]))[['lab']]),
size = labSize,
check_overlap = TRUE,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE)
} else if (!drawConnectors && is.null(selectLab)) {
plot <- plot + geom_text(
data = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff),
aes(label = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff)[['lab']]),
size = labSize,
check_overlap = TRUE,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE)
}
} else {
# For labeling with geom_[text|label]_repel and
# geom_[text|label] with check_overlap = TRUE, 4 possible
# scenarios can arise
if (drawConnectors && is.null(selectLab)) {
if (arrowheads) {
arr <- arrow(length = lengthConnectors,
type = typeConnectors, ends = endsConnectors)
} else {
arr <- NULL
}
plot <- plot + geom_label_repel(
data = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff),
aes(label = subset(toptable,
toptable[[y]]<pCutoff &
abs(toptable[[x]]) > FCcutoff)[['lab']]),
xlim = c(NA, NA),
ylim = c(NA, NA),
size = labSize,
segment.color = colConnectors,
segment.size = widthConnectors,
arrow = arr,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE,
direction = directionConnectors,
max.overlaps = max.overlaps,
min.segment.length = min.segment.length)
} else if (drawConnectors && !is.null(selectLab)) {
if (arrowheads) {
arr <- arrow(length = lengthConnectors,
type = typeConnectors, ends = endsConnectors)
} else {
arr <- NULL
}
plot <- plot + geom_label_repel(
data = subset(toptable,
!is.na(toptable[['lab']])),
aes(label = subset(toptable,
!is.na(toptable[['lab']]))[['lab']]),
xlim = c(NA, NA),
ylim = c(NA, NA),
size = labSize,
segment.color = colConnectors,
segment.size = widthConnectors,
arrow = arr,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE,
direction = directionConnectors,
max.overlaps = max.overlaps,
min.segment.length = min.segment.length)
} else if (!drawConnectors && !is.null(selectLab)) {
plot <- plot + geom_label(
data = subset(toptable,
!is.na(toptable[["lab"]])),
aes(
label = subset(toptable,
!is.na(toptable[['lab']]))[['lab']]),
size = labSize,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE)
} else if (!drawConnectors && is.null(selectLab)) {
plot <- plot + geom_label(
data = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff),
aes(label = subset(toptable,
toptable[[y]] < pCutoff &
abs(toptable[[x]]) > FCcutoff)[['lab']]),
size = labSize,
colour = labCol,
fontface = labFace,
parse = parseLabels,
na.rm = TRUE)
}
}
# encircle
if (!is.null(encircle)) {
if (is(try(find.package("ggalt"), silent=TRUE), "try-error")) {
stop("Please install package \"ggalt\" to access the \"encircle\" features")
}
plot <- plot +
ggalt::geom_encircle(
data = subset(toptable,
rownames(toptable) %in% encircle),
colour = encircleCol,
fill = encircleFill,
alpha = encircleAlpha,
size = encircleSize,
show.legend = FALSE,
na.rm = TRUE)
}
# shade
if (!is.null(shade)) {
plot <- plot +
stat_density2d(
data = subset(toptable,
rownames(toptable) %in% shade),
fill = shadeFill,
alpha = shadeAlpha,
geom = 'polygon',
contour = TRUE,
size = shadeSize,
bins = shadeBins,
show.legend = FALSE,
na.rm = TRUE)
}
plot <- plot + coord_cartesian(clip = 'off')
return(plot)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_df <- data.frame('airway')
print(my_df)
my_df <- data.frame(airway)
View(my_df)
View(airway)
airway@assays@data@listData[["counts"]]
rm(my_df)
View(EnhancedVolcano)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp('C:/Git/R/Week6/Day2/EnhancedVolcano_Demo')
# Label the top 10 most significant genes
top_genes <- data[order(data$pvalue)[1:10], ]
# Create a volcano plot
ggplot(data, aes(x = log2FoldChange, 7 = negLog10Pvalue)) +
# Create a volcano plot
ggplot(data, aes(x = log2FoldChange, y = negLog10Pvalue)) +
geom_point(aes(color = (abs(log2FoldChange) > log2FC_cutoff & pvalue < pvalue_cutoff))) +
scale_color_manual(values = c('black', 'red')) +
lab(title = 'Volcano Plot',
x = 'Log2 Fold Change',
y = '-Log10 P-value') +
theme_minimal()
rlang::last_trace()
View(airway)
View(airway)
# Define cutoffs for significance
log2FC_cutoff <- 1
shiny::runApp('C:/Git/network-explorer/network-explorer')
install.packages('cjyshiny')
library(cyjShiny)
install.packages("graph")
install.packages("cyjShiny")
runApp('C:/Git/network-explorer/network-explorer')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph", version = "3.18")
runApp('C:/Git/network-explorer/network-explorer')
runApp('C:/Git/fold-change-explorer/fold-change-explorer')
runApp('C:/Git/fold-change-explorer/fold-change-explorer')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Git/fold-change-explorer/fold-change-explorer')
runApp('C:/Git/fold-change-explorer/fold-change-explorer')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?toJSON
runApp()
runApp()
?require
runApp()
runApp()
runApp()
runApp()
create_volcano_plot(df(), event_column(), fold_change_column(), significance_column(), input, fold_change_threshold(), significance_threshold(), colors(), sizes())
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
runApp('C:/Git/R/Week6/Day4/dev/EnhancedVolcano')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp('C:/Git/pca-explorer/pca-explorer')
shiny::runApp()
